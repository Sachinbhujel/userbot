import os
from asyncio import sleep
from multiprocessing import Event
from telethon.client import chats
from telethon.sync import TelegramClient, events
#from config import api_hash, api_id
import time
from telethon.tl.types import Chat, Photo # type: ignore
import asyncio
from telethon import events
import os
import asyncio
from telethon import TelegramClient, events , functions
import contextlib
from telethon.tl import types


import random
from io import BytesIO
import textwrap
import requests
import json



def load_config(config_file='config.json'):
     with open(config_file, 'r')as f:
          config = json.load(f)
          return config
     
config = load_config()     

api_id = config.get('api_id')
api_hash = config.get('api_hash')

kio = TelegramClient('session' , api_id , api_hash)

@kio.on(events.NewMessage(pattern=r"\.hi"))
async def greeting(event):
        await event.edit("""
        РађРађРађРађРађРбђРАђРађРађРађРађРађРађРађРађРађ
РађРађРађРађРб░РБ┐РА┐РаЌРађРааРаёРАђРађРађРађРађ
РађРађРађРађРАюРаЂРађРађРађРађРађРаѕРаЉРбХРБХРАё
РбђРБХРБдРБИРађРб╝РБЪРАЄРађРађРбђРБђРађРаўРА┐РаЃ
РађРб┐РБ┐РБ┐РБёРањРађРааРбХРАѓРбФРБ┐РбЄРбђРаЃРађ
РађРаѕРа╗РБ┐РБ┐РБ┐РБХРБцРБђРБђРБђРБѓРАаРаіРађРађ
РађРађРађРаЃРађРађРаЅРаЎРаЏРа┐РБ┐РБ┐РБДРађРађРађ
РађРађРаўРАђРађРађРађРађРађРађРаўРБ┐РБ┐РАЄРађРађ
РађРађРађРБиРБёРАђРађРађРађРбђРБ┤РАЪРа┐РаЃРађРађ
РађРађРађРб╗РБ┐РБ┐РаЅРаЅРб╣РБ┐РБ┐РаЂРађРађРађРађ HELLO GUYSIS
РађРађРађРађРаЅРаЂРађРађРађРаЅРаЂРађРађРађРађРађРађРађРађ
        """)


@kio.on(events.NewMessage(pattern=r"\.hello"))
async def greeting(event):
        await event.edit("""
РЋћРћЊРћЈРЋдРћЂРћЂРЋдРћЊРЋћРћЊРЋћРћЂРћЂРЋЌ
РЋЉРћЌРћЏРЋЉРћЌРћЂРЋБРћЃРЋЉРћЃРЋЉРЋ»РЋ░РЋЉ     
РЋЉРћЈРћЊРЋЉРћЈРћЂРЋБРћЌРЋБРћЌРЋБРЋ░РЋ»РЋЉ      
РЋџРћЏРћЌРЋЕРћЂРћЂРЋЕРћЂРЋЕРћЂРЋЕРћЂРћЂРЋЮРађРађРађ
        """)
        
@kio.on(events.NewMessage(pattern=r"\.fuck"))
async def greeting(event):
        await event.edit("F*ck You Baby ­ЪќЋ")
        time.sleep(2)  
        await event.edit("Baby, Ohh.. Yes ­ЪЉЁ")
        time.sleep(2)  
        await event.edit("""
 РбђРБ┤РА┐Ра┐РБдРађРађРађРађРађРађРађРађРађРађРађРађРађ
РађРбИРА┐РБђРааРаЄРбДРађРађРађРађРађРађРађРађРађРађРађРађ
РађРађРбиРађРбђРБђРаўРБєРађРађРађРађРађРађРађРађРађРађРађ
РађРађРаѕРБЄРаЅРађРађРа╣РАёРађРађРађРађРађРађРађРађРађРађ
РађРађРбаРбЙРАёРађРађРађРб╗РаъРаЊРб║РаЅРаЊРБдРАђРађРађРађ
РађРБаРАЙРбѓРБ▒РаљРаЏРаГРађРбЃРађРађРаАРАђРаѕРа│РБёРађРађ
РБ┤РаФРаЏРађРаѕРбЄРађРађРађРађРаєРађРађРбАРађРађРаўРБєРађ
РБЄРбЄРађРађРађРађРбєРађРађРађРаѕРАёРађРађРбДРађРађРбИРАє
Рб╗РаИРАђРађРађРађРбИРАєРађРађРађРаљРађРађРађРађРбђРАъРађ
РбИРађРб│РађРађРађРађРаІРађРађРађРађРађРађРађРББРаЙРађРађ
РаѕРа│РБёРбєРађРађРађРађРаєРађРађРађРБаРАдРаъРаЃРађF*CK YOU
РађРађРаѕРаЏРаиРацРацРаќРаџРањРањРаџРаЂРађРађРађРађРађРађРађ
        """)

@kio.on(events.NewMessage(pattern=r"\.gn"))
async def greeting(event):
        await event.edit("""
РѕЕРђЋРђЋРђЋРђЋРѕЕ     ╦Ќ╦Ј╦І РўЁ ╦ј╦і╦Ќ
|    РѕД  №ЙЇ        |
|    (* ┬┤ Рќй`)     |  < р┤│рхњрхњрхѕр┤║РЂ▒рхЇ╩░рхЌ   РЎА
|№ЙЅ^РїњРїњсЂЦ№┐Б  №╝╝
(сђђсЃјсђђсђђРїњ сЃй №╝╝
№╝╝сђђсђђ|№┐Б№┐Б№┐Б№┐Б№┐Б|
сђђ №╝╝,№ЙЅ| РађРађРађРађРађРађРађ
        """)

@kio.on(events.NewMessage(pattern=r"\.bear"))
async def greeting(event):
        await event.edit(""" KESA HE SAFED BHAKU """)
        time.sleep(2)
        await event.edit("""
РађРађРађРађРађРађРађРађРађРађРађРБђРБђРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађ
РађРађРађРађРађРађРБ░РБ┐РБ┐РБ┐РБ┐РБдРБђРБђРБђРађРађРађРађРађРађРађРађРађ
РађРађРађРађРађРађРб┐РБ┐РаЪРаІРаЅРађРађРађРађРаЅРаЉРабРБёРАђРађРађРађРађРађ                
РађРађРађРађРађРбаРаъРаЂРађРађРађРађРађРађРађРађРађРађРађРаЎРб┐РБ┐РБ┐РБдРАђ                
РађРБђРађРађРбђРАЈРађРбђРБ┤РБХРБХРАёРађРађРађРађРађРађРађРађРађРб╗РБ┐РБ┐РаЄ
РБЙРБ┐РБ┐РБдРБ╝РАђРађРб║РБ┐РБ┐РА┐РаЃРађРађРађРађРБаРБцРБёРађРађРаѕРА┐РаІРађ
Рб┐РБ┐РБ┐РБ┐РБ┐РБЄРађРацРаїРаЂРађРАђРб▓РАХРаёРбИРБЈРБ┐РБ┐РађРађРађРАЄРађРађ
РаѕРб┐РБ┐РБ┐РБ┐РБ┐РБиРБёРАђРађРађРаѕРаЅРаЊРаѓРађРаЎРаЏРаЏРааРађРАИРаЂРађРађ
РађРађРа╗РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБиРБдРБёРБђРађРађРађРађРаЉРађРБаРаъРаЂРађРађРађ
РађРађРађРбИРАЈРаЅРаЏРаЏРаЏРа┐Ра┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РАёРађРађРађРађРађ
РађРађРађРаИРађРађРађРађРађРађРађРађРаѕРаЅРаЏРб┐РБ┐РБ┐РБ┐РБ┐РАёРађРађРађРађ
РађРађРађРби  @ice_bear526РаѕРб╗РБ┐РБ┐РБ┐РБ┐РАђРађРађРађ
РађРађРађРбИРБєРађРађРађРађРађ      РађРађРБ┐РБ┐РБ┐РБ┐РАЄРађРађРађ
РађРађРађРбИРБ┐РБдРБђРађРађРађРађРађРађРађРађРбђРБ╝РАЪРа╗Ра┐РаЪРАђРађРађРађ
РађРађ РађРБ┐РБ┐РБ┐РБ┐РБХРаХРацРацРбцРБХРБЙРБ┐РБ┐РАЄРађ
РађРађРађРађРа╣РБ┐РБ┐РБ┐РаЈРађРађРађРаѕРб┐РБ┐РБ┐РА┐РаЂРађРађРађРађРађРађРађ
РађРађРађРађРађРаѕРаЅРаЅРађРађРађРађРађРађРаЅРаЅРађ
        """)

@kio.on(events.NewMessage(pattern=r"\.gm"))
async def greeting(event):
        await event.edit("""
Good morning!
     сЂИ   +        Рђћ╠│═Ъ═ъ═ъ­ЪњЌ
ЯФ«  -   ╠Ф НЏ )сЂц  Рђћ╠│═Ъ═ъ═ъ ­ЪњЌ         Рђћ╠│═Ъ═ъ═ъ­ЪњЌ +
(сЂц    <                Рђћ╠│═Ъ═ъ═ъ­ЪњЌ
№йю  _   сЂц      +  Рђћ╠│═Ъ═ъ═ъ­ЪњЌ         Рђћ╠│═Ъ═ъ═ъ­ЪњЌ ╦џ
`сЂЌ┬┤РађРађРађРађРађРађРађРађРађРађРађРађ
        """)

@kio.on(events.NewMessage(pattern=r"\.sleep"))
async def greeting(event):
        await event.edit("­Ъў┤­ЪЦ▒­Ъў┤­ЪЦ▒")
        time.sleep(2)
        await event.edit("­ЪЦ▒­Ъў┤­ЪЦ▒­Ъў┤")
        time.sleep(2)
        await event.edit("­Ъў┤­ЪЦ▒­Ъў┤­ЪЦ▒")
        time.sleep(2)
        await event.edit("­ЪЦ▒­Ъў┤­ЪЦ▒­Ъў┤")
        time.sleep(2)
        await event.edit("­Ъў┤­ЪЦ▒­Ъў┤­ЪЦ▒")
        time.sleep(2)
        await event.edit("­ЪЦ▒­Ъў┤­ЪЦ▒­Ъў┤")
        time.sleep(2)
        await event.edit("""
РѕЕРђЋРђЋРђЋРђЋРѕЕ     ╦Ќ╦Ј╦І РўЁ ╦ј╦і╦Ќ
|    РѕД  №ЙЇ        |
|    (* ┬┤ Рќй`)     |  < р┤│рхњрхњрхѕр┤║РЂ▒рхЇ╩░рхЌ   РЎА
|№ЙЅ^РїњРїњсЂЦ№┐Б  №╝╝
(сђђсЃјсђђсђђРїњ сЃй №╝╝
№╝╝сђђсђђ|№┐Б№┐Б№┐Б№┐Б№┐Б|
сђђ №╝╝,№ЙЅ| РађРађРађРађРађРађРађ
      """)

@kio.on(events.NewMessage(pattern=r"\.hehe"))
async def greeting(event):
        await event.edit("­Ъўђ")
        time.sleep(2)
        await event.edit("­ЪўЃ")
        time.sleep(2)
        await event.edit("­Ъўё")
        time.sleep(2)
        await event.edit("­ЪўЂ")
        time.sleep(2)
        await event.edit("­Ъўј")
        time.sleep(2)
        await event.edit("­ЪўЁ")
        time.sleep(2)
        await event.edit("­ЪцБ")
        time.sleep(2)
        await event.edit("­Ъўѓ")
        time.sleep(2)
        await event.edit("­ЪўЏ")
        time.sleep(2)
        await event.edit("­Ъўю")
        time.sleep(2)
        await event.edit("­Ъцф")
        time.sleep(2)
        await event.edit("­ЪўЮ")
        time.sleep(2)
        await event.edit("­ЪцФ")
        time.sleep(2)
        await event.edit("­ЪФА")
        time.sleep(2)
        await event.edit("­ЪўХ")
        time.sleep(2)
        await event.edit("­Ъўє")
       
@kio.on(events.NewMessage(pattern=r"\.hack"))
async def greeting(event):
        await event.edit("trying to get the weakness...")
        time.sleep(2)
        await event.edit("Found Some INFORMATION...")
        time.sleep(2)
        await event.edit("[Processing...                     ] 5%")
        time.sleep(1)
        await event.edit("[Processing.....                   ] 10%")
        time.sleep(1)
        await event.edit("[Processing.......                 ] 15%")
        time.sleep(1)
        await event.edit("[Processing.........               ] 20%")
        time.sleep(1)
        await event.edit("[Processing..........              ] 35%")
        time.sleep(1)
        await event.edit("[Processing...........             ] 45%")
        time.sleep(1)
        await event.edit("[Processing.............           ] 50%")
        time.sleep(1)
        await event.edit("[Processing...............         ] 60%")
        time.sleep(1)
        await event.edit("[Processing.................       ] 70%")
        time.sleep(1)
        await event.edit("[Processing....................    ] 80%")
        time.sleep(1)
        await event.edit("[Processing....................... ] 90%")
        time.sleep(1)
        await event.edit("[Processing........................] 100%")
        time.sleep(1)
        await event.edit("gained access...")
        time.sleep(1)
        await event.edit("You are HAcked Buddy...")
        time.sleep(1)
      
@kio.on(events.NewMessage(pattern=r"\.alive"))
async def greeting(event):
        photo_path = r"C:\Users\LENOVO\Desktop\KIO\USERBOT\Kio_xd_ketty_5260.jpg" #photo.jpg path of you pc/device
        await event.edit(
            file=photo_path,
            text="""
Yes Boss, I Am Alive.
How Can I Help You?

Owner    = 
Developer = 
            """
        )
        await asyncio.sleep(10)
        await kio.delete_messages(event.chat_id, [event.id])

@kio.on(events.NewMessage(pattern=r"\.sad"))
async def greeting(event):
        await event.edit("­ЪЎѓ")
        time.sleep(2)
        await event.edit("­ЪЎЃ")
        time.sleep(2)
        await event.edit("­ЪЦ▓")
        time.sleep(2)
        await event.edit("­Ъўљ")
        time.sleep(2)
        await event.edit("­ЪўЋ")
        time.sleep(2)
        await event.edit("­ЪЎЂ")
        time.sleep(2)
        await event.edit("Рў╣№ИЈ")
        time.sleep(2)
        await event.edit("­Ъў░")
        time.sleep(2)
        await event.edit("­ЪўЦ")
        time.sleep(2)
        await event.edit("­Ъўб")
        time.sleep(2)
        await event.edit("­ЪўГ")
        time.sleep(2)
        await event.edit("­ЪўБ")
        time.sleep(2)
        await event.edit("­Ъўъ")
        time.sleep(2)
        await event.edit("­ЪўЕ")
        
@kio.on(events.NewMessage(pattern=r"\.heart"))
async def greeting(event):
        await event.edit("­Ъњї")
        time.sleep(2)
        await event.edit("­Ъњў")
        time.sleep(2)
        await event.edit("­ЪњЮ")
        time.sleep(2)
        await event.edit("­Ъњќ")
        time.sleep(2)
        await event.edit("­ЪњЌ")
        time.sleep(2)
        await event.edit("­ЪњЊ")
        time.sleep(2)
        await event.edit("­Ъњъ")
        time.sleep(2)
        await event.edit("­ЪњЋ")
        time.sleep(2)
        await event.edit("­ЪњЪ")
        time.sleep(2)
        await event.edit("РЮБ№ИЈ")
        time.sleep(2)
        await event.edit("РЮц№ИЈРђЇ­ЪћЦ")
        time.sleep(2)
        await event.edit("РЮц№ИЈРђЇ­ЪЕ╣")
        time.sleep(2)
        await event.edit("РЮц№ИЈ")
        time.sleep(2)
        await event.edit("­ЪЕи")
        time.sleep(2)
        await event.edit("­ЪДА")
        time.sleep(2)
        await event.edit("­ЪњЏ")
        time.sleep(2)
        await event.edit("­Ъњџ")
        time.sleep(2)
        await event.edit("­ЪњЎ")
        time.sleep(2)
        await event.edit("­ЪЕх")
        time.sleep(2)
        await event.edit("­Ъњю")
        time.sleep(2)
        await event.edit("­Ъцј")
        time.sleep(2)
        await event.edit("­Ъќц")
        time.sleep(2)
        await event.edit("­ЪЕХ")
        time.sleep(2)
        await event.edit("­ЪцЇ")
        time.sleep(2)
        await event.edit("You Are So Cute ­ЪЎѕ")



####################################################################################################################################################################################

# Replace with your own Telegram user ID
BOT_OWNER_ID =           # Your Telegram user ID

# Global dictionary to track ongoing spam sessions
spam_sessions = {}

@kio.on(events.NewMessage(pattern=r"\.spam (\d+)(.*)?"))
async def spam(event):
    """
    Function to send a message, sticker, or replied object multiple times to the chat.
    Only the bot owner can use this command.
    :param event: The event object containing message details.
    """
    # Debug: Log the sender ID
    print(f"Sender ID: {event.sender_id}")

    # Check if the sender is the bot owner
    if event.sender_id != BOT_OWNER_ID:
        await event.reply("You are not authorized to use this command.")
        return

    match = event.pattern_match
    count = int(match.group(1))  # First group is count
    text = match.group(2).strip() if match.group(2) else None  # Second group is text, optional

    # Get the chat and replied message
    chat = await event.get_chat()
    reply_message = await event.get_reply_message()

    # Generate a unique session ID for this spam operation (based on chat ID and user ID)
    session_id = f"{chat.id}_{event.sender_id}"

    # Check if there's an active spam session
    if session_id in spam_sessions and spam_sessions[session_id]['active']:
        await event.reply("You are already spamming! Please stop the current spam first using `.stop`.")
        return

    # Validate input and reply_message
    if not text and not reply_message:
        await event.reply("Please specify text to spam or reply to a message/sticker.")
        return

    # Create a new session in the spam_sessions dictionary
    spam_sessions[session_id] = {
        'active': True,
        'count': count,
        'chat': chat,
        'current_count': 0  # Track how many messages have been sent
    }

    # Start sending the spam messages
    for _ in range(count):
        if not spam_sessions[session_id]['active']:  # Check if spam was stopped
            await event.reply("Spam has been stopped.")
            break

        # Spam the appropriate object
        if text:
            await kio.send_message(chat, text)  # Send the specified text
        elif reply_message:
            if reply_message.sticker:  # Spam the sticker
                await kio.send_file(chat, reply_message.media)
            else:  # Spam the replied message
                await kio.send_message(chat, reply_message.message)

        spam_sessions[session_id]['current_count'] += 1
        await asyncio.sleep(0.1)  # Optional delay between messages

    # After spamming is complete, mark the session as inactive
    spam_sessions[session_id]['active'] = False
    await event.reply(f"Successfully spammed {spam_sessions[session_id]['current_count']} times!")

@kio.on(events.NewMessage(pattern=r"\.stop"))
async def stop_spam(event):
    """
    Stop the ongoing spam session.
    Only the bot owner can use this command.
    :param event: The event object containing message details.
    """
    # Debug: Log the sender ID
    print(f"Sender ID: {event.sender_id}")

    # Check if the sender is the bot owner
    if event.sender_id != BOT_OWNER_ID:
        await event.reply("You are not authorized to use this command.")
        return

    # Generate the session ID for the user in the chat
    session_id = f"{event.chat_id}_{event.sender_id}"

    # Check if there's an active spam session to stop
    if session_id not in spam_sessions or not spam_sessions[session_id]['active']:
        await event.reply("No active spam session found to stop.")
        return

    # Mark the session as inactive to stop it
    spam_sessions[session_id]['active'] = False
    await event.reply("Spam session has been successfully stopped.")

#####################################################################################################################################
OWNER_ID =    # Replace with your own Telegram user ID

@kio.on(events.NewMessage(pattern=r"\.photo(?:\s|$)([\s\S]*)"))
async def potocmd(event):
    # Check if the user is the bot owner
    if event.sender_id != OWNER_ID:
        return await event.reply("`­Юље­ЮљД­ЮљЦ­Юљ▓ ­Юљі­Юљб­Юље ­ЪдЁ РюЄсђљРюў­ЮЌЌРёбсђЉ­Юљѓ­Юљђ­ЮљІ­ЮљІ РъБ ­Юљњ­Юљб­Юљє­ЮљЇ сђј K╬БкгкгY сђЈ ­Юљ«­Юљг­Юљъ ­ЮљГ­ЮљА­Юљб­Юљг ­Юљю­Юље­Юљд­Юљд­Юљџ­ЮљД­ЮљЮ`")

    "To get user or group profile pic"
    uid = "".join(event.raw_text.split(maxsplit=1)[1:])
    user = await event.get_reply_message()
    chat = event.input_chat
    if user and user.sender:
        photos = await event.client.get_profile_photos(user.sender)
        u = True
    else:
        photos = await event.client.get_profile_photos(chat)
        u = False
    if not uid.strip():
        uid = 1
        if uid > len(photos):
            return await event.edit("`No photo found of this NIBBA / NIBBI. Now u Die!`")
        send_photos = await event.client.download_media(photos[uid - 1])
        await event.client.send_file(event.chat_id, send_photos)
    elif uid.strip() == "all":
        if len(photos) > 0:
            await event.client.send_file(event.chat_id, photos)
        else:
            try:
                if u:
                    photo = await event.client.download_profile_photo(user.sender)
                else:
                    photo = await event.client.download_profile_photo(event.input_chat)
                await event.client.send_file(event.chat_id, photo)
            except Exception:
                return await event.edit("`This user has no photos to show you`")
    else:
        try:
            uid = int(uid)
            if uid <= 0:
                await event.edit("```number Invalid!``` **Are you Comedy Me ?**")
                return
        except ValueError:
            await event.edit("`Are you comedy me ?`")
            return
        if uid > len(photos):
            return await event.edit("`No photo found of this NIBBA / NIBBI. Now u Die!`")

        send_photos = await event.client.download_media(photos[uid - 1])
        await event.client.send_file(event.chat_id, send_photos)
    await event.delete()

kio.start()
kio.run_until_disconnected()